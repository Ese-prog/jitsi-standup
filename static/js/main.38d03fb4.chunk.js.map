{"version":3,"sources":["components/Circle.js","utils.js","components/Seat.js","components/ConnectForm.js","components/Audio.js","hooks/useWindowSize.js","App.js","serviceWorker.js","index.js"],"names":["Circle","vertical","horizontal","size","props","style","position","display","height","width","borderRadius","overflow","justifyContent","top","left","getWidthForSeats","seats","fullWIdth","Math","min","window","innerHeight","innerWidth","sqrt","Seat","track","index","length","seatSize","disanceRatio","angle","cos","PI","sin","flexShrink","autoPlay","key","getId","ref","attach","useOnChange","setter","useCallback","e","target","value","ConnectForm","connect","room","domain","setDomain","setRoom","onDomainChange","onRoomChange","noValidate","autoComplete","onSubmit","TextField","label","placeholder","onChange","Button","type","color","Audio","isLocal","useWindowSize","isClient","getSize","undefined","useState","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","$","a","config","connectionConfig","Object","assign","serviceUrl","websocket","bosh","indexOf","Promise","resolve","reject","connection","JitsiMeetJS","JitsiConnection","console","log","events","CONNECTION_ESTABLISHED","CONNECTION_FAILED","join","conference","initJitsiConference","on","CONFERENCE_JOINED","connectandJoin","createLocalTracks","devices","facingMode","localTracks","localTrack","find","getType","addTrack","localAudioTrack","loadAndConnect","script","document","createElement","onload","init","configScript","src","querySelector","appendChild","then","useTracks","tracks","setTracks","_track","removeTrack","filter","getDefaultParamsValue","params","location","search","qs","parse","slice","autoJoin","autojoin","App","defaultParams","useMemo","mainState","setMainState","setConference","videoTracks","addVideoTrack","removeVideoTrack","audioTracks","addAudioTrack","removeAudioTrack","preventDefault","TRACK_ADDED","TRACK_REMOVED","className","maxHeight","maxWidth","background","map","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.38d03fb4.chunk.js","sourcesContent":["import React from 'react';\nexport const Circle = ({ vertical, horizontal, size, ...props }) => (<div style={{\n  position: 'absolute',\n  display: 'flex', height: size, width: size, borderRadius: size, overflow: 'hidden', justifyContent: 'center',\n  top: `calc(50% - ${size}px/2  + ${vertical}%)`,\n  left: `calc(50% - ${size}px/2 + ${horizontal}%)`,\n}} {...props} />);\n","export const getWidthForSeats = seats => {\n  const fullWIdth = Math.min(window.innerHeight, window.innerWidth);\n  switch (seats) {\n    case 0: return 0;\n    case 1: return fullWIdth;\n    case 2: return fullWIdth / 2;\n    case 3: return fullWIdth / (1 + 2 / Math.sqrt(3));\n    case 4: return fullWIdth / (1 + Math.sqrt(2));\n    case 5: return fullWIdth / (1 + Math.sqrt(2 * (1 + 1 / Math.sqrt(5))));\n    case 6: return fullWIdth / 3;\n    case 7: return fullWIdth / 4;\n    default: return fullWIdth / 4;\n  }\n};\nexport const getDistanceRatioForSeats = seats => {\n  if (seats < 2)\n    return 0;\n  const width = getWidthForSeats(seats);\n  const fullWIdth = Math.min(window.innerHeight, window.innerWidth);\n  return 50 - width / 2 / fullWIdth * 100;\n};\n","import React from 'react';\nimport { Circle } from './Circle';\n\nimport { getWidthForSeats, getDistanceRatioForSeats } from '../utils';\n\nexport const Seat = ({ track, index, length }) => {\n  const seatSize = getWidthForSeats(length);\n  const disanceRatio = getDistanceRatioForSeats(length);\n  const angle = (360 / length) * index;\n  const horizontal = Math.cos(angle * 2 * Math.PI / 360) * disanceRatio;\n  const vertical = Math.sin(angle * 2 * Math.PI / 360) * disanceRatio;\n  \n  return (<Circle size={seatSize} horizontal={horizontal} vertical={vertical}>\n    <video height={seatSize} style={{ flexShrink: 0 }} autoPlay='1' key={`track_${track.getId()}`} ref={(ref) => ref && track.attach(ref)} />\n  </Circle>);\n};\n","import React, { useCallback } from 'react';\nimport { Button, TextField } from '@material-ui/core';\n\nconst useOnChange = (setter) => useCallback(e => setter(e.target.value), [setter])\n\nexport const ConnectForm = ({ connect, room, domain, setDomain, setRoom }) => {\n\n  const onDomainChange = useOnChange(setDomain)\n  const onRoomChange = useOnChange(setRoom)\n\nreturn (\n<form noValidate autoComplete=\"off\" onSubmit={connect}>\n  <TextField label=\"Jitsi instance\" placeholder='https://meet.jit.si' value={domain} onChange={onDomainChange}/><br />\n  <TextField label=\"room name\" value={room} placeholder='daily standup' onChange={onRoomChange} /><br />\n  <Button type=\"submit\" color=\"primary\">Join</Button>\n</form>);\n\n}\n","import React from 'react';\nexport const Audio = ({ track, index }) => {\n  if (track && track.isLocal())\n    return null;\n  return <audio autoPlay='1' ref={(ref) => ref && track.attach(ref)} />;\n};\n","import { useState, useEffect } from 'react';\n\nfunction useWindowSize() {\n  const isClient = typeof window === 'object';\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n    \n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [getSize, isClient]); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\n\nexport default useWindowSize","/* global JitsiMeetJS config*/\nimport React, { useState, useCallback, useEffect, useMemo } from 'react';\nimport './App.css';\nimport $ from 'jquery'\nimport { Seat } from './components/Seat';\nimport { ConnectForm } from './components/ConnectForm';\nimport { Audio } from './components/Audio';\nimport useWindowSize from './hooks/useWindowSize'\n\nimport qs from 'qs'\n\nwindow.$  = $\n\nconst connect = async ({ domain, room, config }) => {\n  const connectionConfig = Object.assign({}, config);\n  let serviceUrl = connectionConfig.websocket || connectionConfig.bosh;\n\n  serviceUrl += `?room=${room}`;\n  if(serviceUrl.indexOf('//') === 0){\n    serviceUrl = `https:${serviceUrl}`\n  }\n  connectionConfig.serviceUrl = connectionConfig.bosh = serviceUrl;\n  \n  return new Promise((resolve, reject) => {\n    const connection = new JitsiMeetJS.JitsiConnection(null, undefined, connectionConfig);\n    console.log('JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED', JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED)\n    connection.addEventListener(\n      JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED,\n      () => resolve(connection));\n    connection.addEventListener(JitsiMeetJS.events.connection.CONNECTION_FAILED, reject);\n    connection.connect();\n  }) \n}\n\nconst join = async ({ connection, room }) => {\n  const conference = connection.initJitsiConference(room, {});\n\n  return new Promise(resolve => {\n    conference.on(JitsiMeetJS.events.conference.CONFERENCE_JOINED, () => resolve(conference));\n    conference.join();\n  })\n}\n\nconst connectandJoin = async ({ domain, room, config }) => {\n\n  const connection = await connect({ domain, room, config })\n  const localTracks = await JitsiMeetJS.createLocalTracks({ devices: ['video', 'audio'], facingMode: 'user'}, true);\n\n  const conference = await join({ connection, room })\n  const localTrack = localTracks.find(track => track.getType() === 'video')\n  conference.addTrack(localTrack)\n  const localAudioTrack = localTracks.find(track => track.getType() === 'audio')\n  conference.addTrack(localAudioTrack)\n\n  return { connection, conference, localTrack }\n}\n\nconst loadAndConnect = ({ domain, room}) => {\n\n    return new Promise(( resolve ) => {\n      const script = document.createElement('script')\n      script.onload = () => {\n        JitsiMeetJS.init();\n\n        const configScript = document.createElement('script')\n        configScript.src = `https://${domain}/config.js`;\n        document.querySelector('head').appendChild(configScript);\n        configScript.onload = () => {\n          connectandJoin({ domain, room, config }).then(resolve)\n        }       \n      };\n\n      script.src = `https://${domain}/libs/lib-jitsi-meet.min.js`;\n      document.querySelector('head').appendChild(script);\n    })\n}\n\nconst useTracks = () => {\n  const [tracks, setTracks] = useState([])\n  \n  const addTrack = useCallback((track) => {\n    setTracks((tracks) => {\n      const hasTrack = tracks.find(_track => track.getId() === _track.getId())\n\n      if(hasTrack) return tracks;\n\n      return [...tracks, track]\n      \n    });\n  }, [setTracks])\n\n  const removeTrack = useCallback((track) => {\n    setTracks((tracks) => tracks.filter(_track => track.getId() !== _track.getId()))\n  }, [setTracks])\n\n  return [tracks, addTrack, removeTrack]\n}\n\nconst getDefaultParamsValue = () => {\n  const params = document.location.search.length > 1 ? qs.parse(document.location.search.slice(1)) : {}\n  debugger;\n  return {\n    room: params.room ?? 'daily_standup',\n    domain: params.domain ?? 'meet.jit.si',\n    autoJoin: params.autojoin ?? false,\n  }\n}\n\nfunction App() {\n\n  useWindowSize()\n  const defaultParams = useMemo(getDefaultParamsValue, [])\n\n  const [mainState, setMainState] = useState('init')\n  const [domain, setDomain] = useState(defaultParams.domain)\n  const [room, setRoom] = useState(defaultParams.room)\n  const [conference, setConference] = useState(null)\n  const [videoTracks, addVideoTrack, removeVideoTrack] = useTracks();\n  const [audioTracks, addAudioTrack, removeAudioTrack] = useTracks();\n  \n  const addTrack = useCallback((track) => {\n    if(track.getType() === 'video') addVideoTrack(track)\n    if(track.getType() === 'audio') addAudioTrack(track)\n  }, [ addVideoTrack, addAudioTrack ])\n\n  const removeTrack = useCallback((track) => {\n    if(track.getType() === 'video') removeVideoTrack(track)\n    if(track.getType() === 'audio') removeAudioTrack(track)\n  }, [removeAudioTrack, removeVideoTrack])\n\n  const connect = useCallback(async (e) => {\n    e && e.preventDefault()\n    setMainState('loading')\n    const { connection, conference, localTrack } = await loadAndConnect({ domain, room });\n    setMainState('started')\n    setConference(conference)\n    addTrack(localTrack)\n  }, [addTrack, domain, room]);\n\n  useEffect(() => {\n    if(!conference) return\n\n    conference.on(JitsiMeetJS.events.conference.TRACK_ADDED, addTrack)\n    conference.on(JitsiMeetJS.events.conference.TRACK_REMOVED, removeTrack)\n    \n  }, [addTrack, conference, removeTrack])\n\n  useEffect(() => {\n    if(defaultParams.autoJoin || defaultParams.autoJoin === ''){\n      connect()\n    }\n  }, [connect, defaultParams.autoJoin])\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        { mainState === 'init' && <ConnectForm connect={connect} domain={domain} room={room} setRoom={setRoom} setDomain={setDomain} /> }\n        { mainState === 'loading' && 'Loading' }\n        { mainState === 'started' &&\n        <div style={{\n          height: '100vh', width: '100vw', maxHeight: '100vw', maxWidth: '100vh',\n          background: 'rgba(0, 100,100, 1)',\n          position: 'relative',\n          borderRadius: '100%'\n      }}>\n        {\n          videoTracks.map((track, index) => <Seat track={track} index={index} length={videoTracks.length} key={track.getId()} />)\n        }\n        {\n          audioTracks.map((track, index) => <Audio track={track} index={index} key={track.getId()} />)\n        }\n       </div>}\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}